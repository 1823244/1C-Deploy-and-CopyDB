#Использовать cmdline
#Использовать 1commands
#Использовать logos
#Использовать v8runner
#Использовать progbar
#Использовать ReadParams
#Использовать "./Lib/deployka_m/src"

#Использовать "."

Перем _ПараметрыРаботы;
Перем _Лог;
Перем _Замер;
Перем _УправлениеСеансами;
Перем _Конфигуратор;

// Получить имя лога продукта
//
// Возвращаемое значение:
//  Строка   - имя лога продукта
//
Функция ИмяЛога() Экспорт
	Возврат "oscript.app.Deploy";
КонецФункции



Процедура ВыполнитьБекап()
	
	_Замер.НачатьЗамер( "Начат бекап", "Бекап" );
	
	выполнениеБекапа = Новый РаботаСSQL();
	
	выполнениеБекапа.ИнициализироватьЛог( _Лог.Уровень(), _Замер.ПолучитьПотомка() );

	выполнениеБекапа.УстановитьСервер(       _ПараметрыРаботы.Параметры["SQL.Server"] );
	выполнениеБекапа.УстановитьПользователя( _ПараметрыРаботы.Параметры["SQL.User"] );
	выполнениеБекапа.УстановитьПароль(       _ПараметрыРаботы.Параметры["SQL.Password"] );
	выполнениеБекапа.УстановитьИмяБазы(      _ПараметрыРаботы.Параметры["SQL.Base"] );
	
	результат = выполнениеБекапа.ВыполнитьБекап( _ПараметрыРаботы.Параметры["FileBackup"] );
	
	Если Не результат Тогда
		ЗавершитьРаботу(1);
	КонецЕсли;
	
	_Замер.СообщитьЗамер( "Выполнен бекап");

КонецПроцедуры

Процедура ВключитьRAS()
	
	Если Не _ПараметрыРаботы.УдалятьСоединения() Тогда
		Возврат;
	КонецЕсли;

	Если _ПараметрыРаботы.ЭтоДинамическоеОбновление() Тогда
		Возврат;
	КонецЕсли;

	_Замер.НачатьЗамер( "Включение ras" );

	строкаЗапуска = _ПараметрыРаботы.Параметры["EXERAS"];

	Если ЗначениеЗаполнено( строкаЗапуска ) Тогда
		
		_Лог.Отладка( "Запуск RAS: " + строкаЗапуска + " cluster" );
		
		ЗапуститьПриложение( ОбщегоНазначения.ОбернутьВКавычки( строкаЗапуска ) + " cluster" );
		
		_Замер.СообщитьЗамер( "Включен ras");
		
	Иначе
		
		_Замер.СообщитьЗамер( "Запуск ras пропущен");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьБлокировку()
	
	Если Не _ПараметрыРаботы.УдалятьСоединения() Тогда
		Возврат;
	КонецЕсли;

	Если _ПараметрыРаботы.ЭтоДинамическоеОбновление() Тогда
		Возврат;
	КонецЕсли;

	_Замер.НачатьЗамер( "Установка блокировки для " + _ПараметрыРаботы.ПредставлениеБазы());

	ВывестиКоличествоАктивныхСеансов();
	
	_ПараметрыРаботы.ПараметрыДеплойки.Вставить("Действие", "lock");

	_УправлениеСеансами.ВыполнитьКоманду ( _ПараметрыРаботы.ПараметрыДеплойки );

	_Замер.СообщитьЗамер( "Установлена блокировка для " + _ПараметрыРаботы.ПредставлениеБазы() );
	
КонецПроцедуры

Процедура ВывестиКоличествоАктивныхСеансов()
	
	_Лог.Информация( "Сеансов: " + КоличествоАктивныхСеансов() );
КонецПроцедуры

Функция КоличествоАктивныхСеансов()
	_ПараметрыРаботы.ПараметрыДеплойки.Вставить("Действие", "unlock");
	Возврат _УправлениеСеансами.КоличествоСеансов( _ПараметрыРаботы.ПараметрыДеплойки );
КонецФункции

Процедура УдалитьСоединения()
	
	Если Не _ПараметрыРаботы.УдалятьСоединения() Тогда
		Возврат;
	КонецЕсли;

	Если _ПараметрыРаботы.ЭтоДинамическоеОбновление() Тогда
		Возврат;
	КонецЕсли;

	_Замер.НачатьЗамер( "Принудительное завершение работы пользователей для " + _ПараметрыРаботы.ПредставлениеБазы() );
	
	ВывестиКоличествоАктивныхСеансов();

	_ПараметрыРаботы.ПараметрыДеплойки.Вставить("Действие", "kill");
	
	Для ц = 1 По 5 Цикл
		
		Попытка
			
			_Лог.Отладка( "Удаление соединений, попытка " + ц);

			_УправлениеСеансами.ВыполнитьКоманду ( _ПараметрыРаботы.ПараметрыДеплойки );

			Если КоличествоАктивныхСеансов() = 0 Тогда
				Прервать;
			КонецЕсли;
			
		Исключение
			_Лог.Отладка( "Ошибка удаления соединений: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;

	_Замер.СообщитьЗамер( "Работа пользователей завершена для " + _ПараметрыРаботы.ПредставлениеБазы() );

	ВывестиКоличествоАктивныхСеансов();
	
КонецПроцедуры

Процедура СнятьБлокировку()
	
	Если Не _ПараметрыРаботы.УдалятьСоединения() Тогда
		Возврат;
	КонецЕсли;

	Если _ПараметрыРаботы.ЭтоДинамическоеОбновление() Тогда
		Возврат;
	КонецЕсли;

	_Замер.НачатьЗамер( "Снятие блокировки для " + _ПараметрыРаботы.ПредставлениеБазы()  );	
	
	_ПараметрыРаботы.ПараметрыДеплойки.Вставить("Действие", "unlock");

	_УправлениеСеансами.ВыполнитьКоманду ( _ПараметрыРаботы.ПараметрыДеплойки );

	_Замер.СообщитьЗамер( "Блокировка снята для " + _ПараметрыРаботы.ПредставлениеБазы()  );

	ВывестиКоличествоАктивныхСеансов();
	
КонецПроцедуры

Процедура ПаузаПередУдалениемСеансов()
	
	Если Не _ПараметрыРаботы.УдалятьСоединения() Тогда
		Возврат;
	КонецЕсли;

	Если _ПараметрыРаботы.ЭтоДинамическоеОбновление() Тогда
		Возврат;
	КонецЕсли;

	_Замер.НачатьЗамер( "Пауза перед принудительным завершением работы для " + _ПараметрыРаботы.ПредставлениеБазы()  );
		
	Если ЗначениеЗаполнено( _ПараметрыРаботы.Параметры["Cluster.lockstart"] ) Тогда

		всегоПаузаСекунд = _ПараметрыРаботы.Параметры["Cluster.lockstart"] - ТекущаяДата();

	Иначе

		всегоПаузаСекунд = _ПараметрыРаботы.Параметры["Cluster.lockstartat"];

	КонецЕсли;

	Если всегоПаузаСекунд < 10 Тогда
		всегоПаузаСекунд = 10;
	КонецЕсли;

	ПрогрессБарПаузы = Новый ПрогрессБар();
	ПрогрессБарПаузы.Начать(всегоПаузаСекунд, "Ожидание ", Ложь, Ложь, Ложь);
	
	Для ц = 0 По всегоПаузаСекунд Цикл
		
		ПрогрессБарПаузы.СделатьШаг();
		Приостановить(1000);
		
	КонецЦикла;
	ПрогрессБарПаузы.Завершить();
	
	_Замер.СообщитьЗамер( "Пауза завершена для " + _ПараметрыРаботы.ПредставлениеБазы()  );
	
КонецПроцедуры

Процедура ОбновитьКонфигурациюИзХранилища()
	
	Если Не _ПараметрыРаботы.ОбновлятьКонфигурацию() Тогда
		Возврат;
	КонецЕсли;
	
	Если _ПараметрыРаботы.Параметры["UseDynamicUpdate"] = Истина Тогда
		
		_Замер.НачатьЗамер( "Начало получения конфигурации из хранилища для " + _ПараметрыРаботы.ПредставлениеБазы()  );

		_Конфигуратор.ПолучитьИзмененияКонфигурацииБазыДанныхИзХранилища(_ПараметрыРаботы.Параметры["Repo.Connect"], _ПараметрыРаботы.Параметры["Repo.User"], _ПараметрыРаботы.Параметры["Repo.Password"] );
		Текст = _Конфигуратор.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			_Лог.Информация(Текст);
		КонецЕсли;
		
		_Замер.СообщитьЗамер( "Конфигурация получена для " + _ПараметрыРаботы.ПредставлениеБазы()  );
		_Замер.НачатьЗамер( "Начало динамического обновления для " + _ПараметрыРаботы.ПредставлениеБазы()  );

		_Конфигуратор.ОбновитьКонфигурациюБазыДанных( ,, Истина );
		Текст = _Конфигуратор.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			_Лог.Информация(Текст);
		КонецЕсли;
		
		_Замер.СообщитьЗамер( "Конфигурация обновлена для " + _ПараметрыРаботы.ПредставлениеБазы()  );

	Иначе
		
		_Замер.НачатьЗамер( "Начало обновления конфигурации из хранилища для " + _ПараметрыРаботы.ПредставлениеБазы()  );
		
		_Конфигуратор.ОбновитьКонфигурациюБазыДанныхИзХранилища(_ПараметрыРаботы.Параметры["Repo.Connect"], _ПараметрыРаботы.Параметры["Repo.User"], _ПараметрыРаботы.Параметры["Repo.Password"] );
		Текст = _Конфигуратор.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			_Лог.Информация(Текст);
		КонецЕсли;
		
		_Замер.СообщитьЗамер( "Конфигурация обновлена для " + _ПараметрыРаботы.ПредставлениеБазы()  );
		
	КонецЕсли;	
	
	ОбщегоНазначения.УдалитьФайлЕслиСуществует( _Конфигуратор.ФайлИнформации() );
	
КонецПроцедуры

Процедура ЗапускМиграции()
	
	Если Не _ПараметрыРаботы.ОбновлятьКонфигурацию() Тогда
		Возврат;
	КонецЕсли;
	
	_Замер.НачатьЗамер( "Запуск миграции данных при обновлении для " + _ПараметрыРаботы.ПредставлениеБазы()  );
	
	_Конфигуратор.ЗапуститьВРежимеПредприятия( _ПараметрыРаботы.Параметры["UpdateLaunchParameter"] );
	Текст = _Конфигуратор.ВыводКоманды();
	Если Не ПустаяСтрока(Текст) Тогда
		_Лог.Информация(Текст);
	КонецЕсли;
	ОбщегоНазначения.УдалитьФайлЕслиСуществует( _Конфигуратор.ФайлИнформации() );
	
	_Замер.СообщитьЗамер( "Миграция данных выполнена для " + _ПараметрыРаботы.ПредставлениеБазы()  );
	
КонецПроцедуры



Процедура Деплой()
		
	ВключитьRAS();
	
	_ПараметрыРаботы.ТестПараметров();
	
	Если _ПараметрыРаботы.РежимТестированияПараметров Тогда
		_Замер.СообщитьЗавершение();
		Возврат;
	КонецЕсли;
	
	УстановитьБлокировку();
	Попытка
		ПаузаПередУдалениемСеансов();
		УдалитьСоединения();
		ВыполнитьБекап();
		ОбновитьКонфигурациюИзХранилища();
		ЗапускМиграции();
		СнятьБлокировку();
	Исключение
		СнятьБлокировку();
		Сообщить( "Деплой провален", СтатусСообщения.Important );
		Сообщить( ПодробноеПредставлениеОшибки( ИнформацияОбОшибке()) , СтатусСообщения.Important );
		ЗавершитьРаботу(1);
	КонецПопытки;
	
	_Замер.СообщитьЗавершение();
	
КонецПроцедуры

_Лог = Логирование.ПолучитьЛог(ИмяЛога());

_ПараметрыРаботы = Новый ПараметрыРаботы();
_ПараметрыРаботы.ИспользоватьДеплойку = Истина;

_ПараметрыРаботы.Инициализация( АргументыКоманднойСтроки, _Лог );

_Замер = _ПараметрыРаботы.Замер;
_УправлениеСеансами = _ПараметрыРаботы.УправлениеСеансами;
_Конфигуратор = _ПараметрыРаботы.Конфигуратор;

Деплой();