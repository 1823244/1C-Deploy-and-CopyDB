
Перем Лог Экспорт;
Перем Замер Экспорт;
Перем УправлениеСеансами Экспорт;
Перем Конфигуратор Экспорт;
Перем Параметры Экспорт;
Перем ПараметрыДеплойки Экспорт;

Перем РежимТестированияПараметров Экспорт;

Процедура ПолучитьПараметры( Знач пАргументы )
	
	Парсер = Новый ПарсерАргументовКоманднойСтроки();
	
	Парсер.ДобавитьПараметр("ПутьКФайлу");
	Парсер.ДобавитьПараметрФлаг("-debug");
	Парсер.ДобавитьПараметрФлаг("-testparam");
	
	Параметры = Парсер.Разобрать(пАргументы);
	
	Если Параметры["-debug"] = Истина Тогда
		
		Лог.УстановитьУровень(УровниЛога.Отладка);
		
	КонецЕсли;

	РежимТестированияПараметров = Ложь;
	Если Параметры["-testparam"] = Истина Тогда
		
		РежимТестированияПараметров = Истина;
		Лог.Информация( "Включен режим тестирования параметров" );
		
	КонецЕсли;
	
	ошибкиЧтения = Неопределено;

	массивФайловНастроек = Новый Массив;
	массивФайловНастроек.Добавить( Неопределено );

	списокФайловСПараметрами = Параметры["ПутьКФайлу"];

	Если Не списокФайловСПараметрами = Неопределено Тогда	
		Для каждого цФайл Из СтрРазделить( списокФайловСПараметрами, ";") Цикл
			массивФайловНастроек.Добавить( цФайл );
		КонецЦикла;
	КонецЕсли;

	Параметры = ЧтениеПараметров.Прочитать( массивФайловНастроек, ошибкиЧтения);
	
	Для каждого цЭлемент Из ошибкиЧтения Цикл
		
		Лог.Ошибка( "Ошибка чтения файла " + цЭлемент.Ключ + ": " + цЭлемент.Значение );

	КонецЦикла;
	
	Для каждого цЭлемент Из Параметры Цикл
		
		Лог.Отладка( "Прочитан параметр " + цЭлемент.Ключ + ": " + цЭлемент.Значение );

	КонецЦикла;
	
КонецПроцедуры

Процедура Инициализация( Знач пАргументы, Знач пЛог ) Экспорт

	Замер = Новый Замер();
	
	Лог = пЛог;

	Лог.УстановитьРаскладку(Замер);

	Замер.НачатьЗамер();
	
	Замер.НачатьЗамер( "Инициализация" );
	
	ПолучитьПараметры( пАргументы );	
	
	Если УдалятьСоединения()
		И Не ЭтоДинамическоеОбновление() Тогда
		
		ПараметрыДеплойки = Новый Соответствие;
		
		ПараметрыДеплойки.Вставить( "-ras", Параметры["Cluster.ras"] );
		ПараметрыДеплойки.Вставить( "-rac", Параметры["EXERAC"] );
		
		ПараметрыДеплойки.Вставить( "-db", Параметры["Base.Base"] );
		ПараметрыДеплойки.Вставить( "-db-user", Параметры["Base.User"] );
		ПараметрыДеплойки.Вставить( "-db-pwd", Параметры["Base.Password"] );
		
		ПараметрыДеплойки.Вставить( "-cluster-admin", Параметры["Cluster.Admin"] );
		ПараметрыДеплойки.Вставить( "-cluster-pwd", Параметры["Cluster.Password"] );
		
		ПараметрыДеплойки.Вставить( "-v8version", Параметры["v8version"] );
		ПараметрыДеплойки.Вставить( "-lockuccode", Параметры["Cluster.lockuccode"] );
		ПараметрыДеплойки.Вставить( "-lockmessage", Параметры["Cluster.lockmessage"] );
		ПараметрыДеплойки.Вставить( "-lockstart", Параметры["Cluster.lockstart"] );
		ПараметрыДеплойки.Вставить( "-lockstartat", Параметры["Cluster.lockstartat"] );
		
		ПараметрыДеплойки.Вставить( "Действие", Неопределено );

		УправлениеСеансами = Новый КомандаУправлениеСеансами;
		
		логДеплойки = Логирование.ПолучитьЛог("vanessa.app.deployka");
		логДеплойки.УстановитьУровень( Лог.Уровень() );
		замерПотомок = Замер.ПолучитьПотомка();
		логДеплойки.УстановитьРаскладку( замерПотомок );
		
	КонецЕсли;

	Конфигуратор = Новый УправлениеКонфигуратором;
	
	логРаннер = Логирование.ПолучитьЛог("oscript.lib.v8runner");
	логРаннер.УстановитьУровень( Лог.Уровень() );
	замерПотомок = Замер.ПолучитьПотомка();
	логРаннер.УстановитьРаскладку( замерПотомок );

	Конфигуратор.УстановитьКонтекст(Параметры["Base.Connect"], Параметры["Base.User"], Параметры["Base.Password"]);
	Конфигуратор.ПутьКПлатформе1С( Параметры["EXE1CV8"] );
	Конфигуратор.УстановитьКлючРазрешенияЗапуска( Параметры["Cluster.lockuccode"] );

	Замер.СообщитьЗамер( "Инициализация выполнена" );
	
КонецПроцедуры


Функция УдалятьСоединения() Экспорт	
	Возврат Не Параметры["Cluster.UseLock"] = Ложь;
КонецФункции

Функция ЭтоДинамическоеОбновление() Экспорт
	Возврат Параметры["UseDynamicUpdate"] = Истина;
КонецФункции

Функция ОбновлятьКонфигурацию() Экспорт
	Возврат Не Параметры["UpdateCfg"] = Ложь;
КонецФункции

Функция ПредставлениеБазы() Экспорт
	Возврат Параметры["Base.Connect"];
КонецФункции

Процедура ТестПараметров() Экспорт
	
	результат = Тест_SQL();
	результат = Тест_SQL("Source_SQL") И результат;
	результат = Тест_RAS() И результат;
	результат = Тест_Хранилище() И результат;

	Если Не результат Тогда
		
		Сообщить( "Тест параметров провален", СтатусСообщения.Important );
		ЗавершитьРаботу(1);
		
	КонецЕсли;

КонецПроцедуры

Функция Тест_SQL(Знач пИмяГруппыНастроек = "SQL")

	сервер       = Параметры[ пИмяГруппыНастроек + ".Server"];
	пользователь = Параметры[ пИмяГруппыНастроек + ".User"];
	пароль       = Параметры[ пИмяГруппыНастроек + ".Password"];
	имяБазы      = Параметры[ пИмяГруппыНастроек + ".Base"];

	Если сервер = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;

	представлениеПодключения = сервер + "/" + имяБазы;

	Замер.НачатьЗамер( "Тест подключения к SQL " + представлениеПодключения, "КоличествоСоединений" );

	проверкаСоединения = Новый РаботаСSQL();
	
	проверкаСоединения.ИнициализироватьЛог( Лог.Уровень(), Замер.ПолучитьПотомка() );

	проверкаСоединения.УстановитьСервер(       сервер );
	проверкаСоединения.УстановитьПользователя( пользователь );
	проверкаСоединения.УстановитьПароль(       пароль );
	проверкаСоединения.УстановитьИмяБазы(      имяБазы );
	
	Попытка
		количествоСоединений = проверкаСоединения.ПолучитьКоличествоСоединений();
		тестВыполнен = КоличествоСоединений >= 0;
	Исключение
		Лог.Ошибка( ПодробноеПредставлениеОшибки( ИнформацияОбОшибке()) );
	КонецПопытки;
	
	Если тестВыполнен Тогда
		
		Замер.СообщитьЗамер( "Тест подключения к SQL " + представлениеПодключения + " выполнен");
		Возврат Истина;
		
	Иначе

		Сообщить( "Тест подключения к SQL " + представлениеПодключения + " провален", СтатусСообщения.Important );
		Возврат Ложь;

	КонецЕсли;	

КонецФункции
 
Функция Тест_Хранилище()
	
	Замер.НачатьЗамер( "Тест подключения к хранилищу " + Параметры["Repo.Connect"], "ТестХранилища" );
	
	времФайлОтчета = ПолучитьИмяВременногоФайла();
	
	Попытка
		
		Конфигуратор.ПолучитьОтчетПоВерсиямИзХранилища(
			Параметры["Repo.Connect"], 
			Параметры["Repo.User"], 
			Параметры["Repo.Password"], 
			времФайлОтчета,
			100000,
			100000 );
		Текст = Конфигуратор.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			Лог.Информация(Текст);
		КонецЕсли;
		
		ОбщегоНазначения.УдалитьФайлЕслиСуществует( Конфигуратор.ФайлИнформации() );
		ОбщегоНазначения.УдалитьФайлЕслиСуществует( времФайлОтчета );

		Замер.СообщитьЗамер( "Тест подключения к хранилищу " + Параметры["Repo.Connect"] + " выполнен" );
		Возврат Истина;
		
	Исключение
		Сообщить( "Тест подключения к хранилищу " + Параметры["Repo.Connect"] + " провален", СтатусСообщения.Important );
		Лог.Ошибка( ПодробноеПредставлениеОшибки( ИнформацияОбОшибке()) );
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция Тест_RAS()
	
	Если Не УдалятьСоединения()
		ИЛИ ЭтоДинамическоеОбновление() Тогда

		Возврат Истина;

	КонецЕсли;

	Замер.НачатьЗамер( "Тест RAS", "тестRAS" );	

	Попытка
		ПараметрыДеплойки.Вставить("Действие", "unlock");
		количество = УправлениеСеансами.КоличествоСеансов( ПараметрыДеплойки );
		Замер.СообщитьЗамер( "Тест RAS выполнен" );
		Возврат количество >= 0;
	Исключение
		Сообщить( "Тест RAS провален", СтатусСообщения.Important );
		Лог.Ошибка( ПодробноеПредставлениеОшибки( ИнформацияОбОшибке()) );
		Возврат Ложь;
	КонецПопытки;	

КонецФункции